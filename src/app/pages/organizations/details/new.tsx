import * as React from 'react';
import { RouteComponentProps } from 'react-router';
import { AddDocSourceForm } from 'app/components/DocSources/AddDocSourceForm';
import { DocSource, getDocSources } from 'app/services/docSources';
import DocSourceList from 'app/components/DocSources/DocSourceList';
import Button from 'react-bootstrap/Button';
import { addDashboard, DashboardType, DashboardLayout } from 'app/services/dashboard';

interface DashboardsPageState {
    docSources: DocSource[]
}

interface DashboardsPageParams {
    login: string;
}

interface DashboardsPageProps extends RouteComponentProps<DashboardsPageParams> {

}


interface DispatchProps {

}

interface AllProps extends DashboardsPageProps, DispatchProps {

}

class OrganizationNew extends React.Component<AllProps, DashboardsPageState> {
    constructor(props: AllProps) {
        super(props);
        this.state = {
            docSources: []
        }
    }

    async componentDidMount() {
        const docSources = await getDocSources();
        this.setState({
            docSources
        });
    }

    async addDashboards() {
        const addedDashboard = await addDashboard({
            "title": "Your first dashboard",
            "description": "default dashboard generated by Ahora!",
            "dashboardType": DashboardType.Public,
            "layout": DashboardLayout.OneColumn,
            "gadgets":
                [{ "id": "2020-06-19T18:40:52.955Z", "gadgetType": "ahoradoclist", "metadata": { "searchCriterias": { "assignee": ["me"], "status": ["open"] } }, "title": "My opened issues & Pull Requests" }, { "id": "2020-06-19T18:34:54.386Z", "gadgetType": "ahorabarspie", "metadata": { "searchCriterias": { "status": ["open"], "docType": ["pr"] }, "primaryGroup": "repo", "displayType": "bars" }, "title": "Open Pull Requests by Repos" }, { "id": "2020-06-19T18:34:15.088Z", "gadgetType": "ahorabarspie", "metadata": { "searchCriterias": { "status": ["open"], "docType": ["issue"] }, "primaryGroup": "repo" }, "title": "Opened Issues By Repository" }]
        });

        this.props.history.push(`/organizations/${this.props.match.params.login}/dashboards/${addedDashboard.id}`)
    }

    docSourceAdded(docSource: DocSource) {
        this.setState({
            docSources: [docSource, ...this.state.docSources]
        });
    }

    onDocSourceDeleted(docSourceId: number) {
        this.setState({
            docSources: this.state.docSources.filter((docSource) => docSource.id !== docSourceId)
        })
    }

    render() {
        return (
            <div>
                <p>
                    Hi, Thank you for using <strong>Ahora!</strong>.<br />
                    Please add your favorite repositories.
                </p>
                <div className="mb-4">
                    <AddDocSourceForm onDocSourceAdded={this.docSourceAdded.bind(this)}></AddDocSourceForm>
                </div>
                <DocSourceList onDocSourceDeleted={this.onDocSourceDeleted.bind(this)} docSources={this.state.docSources}></DocSourceList>
                {this.state.docSources.length > 0 &&
                    <div>
                        <Button onClick={this.addDashboards.bind(this)} variant="success">Continue &amp; create a dashboard</Button>
                    </div>
                }
            </div>
        );
    };
}

export default OrganizationNew; 