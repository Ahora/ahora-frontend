import * as React from 'react';
import { RouteComponentProps } from 'react-router';
import { AddDocSourceForm } from 'app/components/DocSources/AddDocSourceForm';
import { DocSource, getDocSources } from 'app/services/docSources';
import DocSourceList from 'app/components/DocSources/DocSourceList';
import { addDashboard, DashboardType, DashboardLayout } from 'app/services/dashboard';
import SyncOrganization from 'app/components/DocSources/SyncOrganization';
import { PaymentData, setOrgPaymentData } from 'app/services/payments';
import { ApplicationState } from 'app/store';
import { connect } from 'react-redux';
import { Organization } from 'app/services/organizations';
import { Button, Space } from 'antd';
import { Link } from 'react-router-dom';

interface DashboardsPageState {
    docSources: DocSource[];
    paymentInfoReceived: boolean;
}

interface DashboardsPageParams {
    login: string;
}

interface ReduxProps {
    organization?: Organization;
}

interface DashboardsPageProps extends RouteComponentProps<DashboardsPageParams> {

}


interface DispatchProps {

}

interface AllProps extends DashboardsPageProps, DispatchProps, ReduxProps {

}

class OrganizationNew extends React.Component<AllProps, DashboardsPageState> {
    constructor(props: AllProps) {
        super(props);
        this.state = {
            docSources: [],
            paymentInfoReceived: false
        }
    }

    async componentDidMount() {
        const docSources = await getDocSources();
        this.setState({
            docSources
        });
    }

    componentDidUpdate(prevProps: AllProps) {
        if (this.props.organization !== prevProps.organization) {
            if (this.props.organization) {
                this.setState({ paymentInfoReceived: this.props.organization.hasPayment });
            }
            else {
                this.setState({ paymentInfoReceived: false });
            }
        }
    }

    async addDashboards() {
        const addedDashboard = await addDashboard({
            "title": "Your first dashboard",
            "description": "default dashboard generated by Ahora!",
            "dashboardType": DashboardType.Public,
            "layout": DashboardLayout.OneColumn,
            "gadgets":
                [{ "id": "2020-06-19T18:40:52.955Z", "gadgetType": "ahoradoclist", "metadata": { "searchCriterias": { "assignee": ["me"], "status": ["open"] } }, "title": "My opened issues & Pull Requests" }, { "id": "2020-06-19T18:34:54.386Z", "gadgetType": "ahorabarspie", "metadata": { "searchCriterias": { "status": ["open"], "docType": ["pr"] }, "primaryGroup": "repo", "displayType": "bars" }, "title": "Open Pull Requests by Repos" }, { "id": "2020-06-19T18:34:15.088Z", "gadgetType": "ahorabarspie", "metadata": { "searchCriterias": { "status": ["open"], "docType": ["issue"] }, "primaryGroup": "repo" }, "title": "Opened Issues By Repository" }]
        });

        this.props.history.push(`/organizations/${this.props.match.params.login}/dashboards/${addedDashboard.id}`)
    }

    skip() {
        this.props.history.push(`/organizations/${this.props.match.params.login}/docs`)
    }

    docSourceAdded(docSource: DocSource) {
        this.setState({
            docSources: [docSource, ...this.state.docSources]
        });
    }

    async onPaymentDataReceived(data: PaymentData) {
        await setOrgPaymentData(data);
        this.setState({
            paymentInfoReceived: true
        })
    }

    onDocSourceDeleted(docSourceId: number) {
        this.setState({
            docSources: this.state.docSources.filter((docSource) => docSource.id !== docSourceId)
        })
    }

    render() {
        return (
            <div className="wrap-content">
                <p>
                    Please add your favorite Github repositories, or <Link to={`/organizations/${this.props.match.params.login}/docs/add`}>add your first item.</Link>
                </p>
                <div style={{ display: "none" }}>
                    <SyncOrganization></SyncOrganization>
                </div>

                <div className="mb-4">
                    <AddDocSourceForm onDocSourceAdded={this.docSourceAdded.bind(this)}></AddDocSourceForm>
                </div>
                <DocSourceList onDocSourceDeleted={this.onDocSourceDeleted.bind(this)} docSources={this.state.docSources}></DocSourceList>
                <Space>
                    {this.state.docSources.length > 0 &&
                        <>
                            <Button onClick={this.addDashboards.bind(this)} type="primary">Continue &amp; create a dashboard</Button>
                        </>
                    }
                    <Button onClick={this.skip.bind(this)} type="default">Skip &amp; add your first doc</Button>

                </Space>
            </div>
        );
    };
}

const mapStateToProps = (state: ApplicationState): ReduxProps => {
    return {
        organization: state.organizations.currentOrganization
    };
};

export default connect(mapStateToProps)(OrganizationNew as any);

